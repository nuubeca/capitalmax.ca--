generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                       String   @id
  userId                   String   @unique
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  expires_in               Int?
  ext_expires_in           Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  refresh_token_expires_in Int?
  createdAt                DateTime @default(now())
  updatedAt                DateTime
  User                     User     @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime
  User         User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model User {
  id            String    @id
  name          String?
  username      String?   @unique
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime
  Account       Account?
  Session       Session[]
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model client {
  id                   String    @id
  firstname            String
  lastname             String
  email                String?
  phone                String?
  address              String?
  city                 String?
  province             String?
  postal_code          String?
  birthdate            DateTime?
  financial_product_id String?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime
}
